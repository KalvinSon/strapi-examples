"""This is a cake collection"""
type Cake {
  _id: String
  name: String
  description: String
  price: String
  picture: String
  link: String
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  comments(sort: String, limit: Int, start: Int, where: JSON): [Review]
}

"""Cakes category list"""
type Category {
  _id: String
  name: String
  cakes(sort: String, limit: Int, start: Int, where: JSON): [Cake]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Cake | Category | Review | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Query {
  cake(id: String!): Cake
  cakes(sort: String, limit: Int, start: Int, where: JSON): [Cake]
  category(id: String!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  review(id: String!): Review
  reviews(sort: String, limit: Int, start: Int, where: JSON): [Review]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: String!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: String!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type Review {
  _id: String
  content: String
  approved: Boolean
  cake: Cake
  author: UsersPermissionsUser
}

type UploadFile {
  _id: String
  created_at: String
  updated_at: String
  name: String
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UsersPermissionsPermission {
  _id: String
  type: String
  controller: String
  action: String
  enabled: Boolean
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: String
  name: String
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsUser {
  _id: String
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  role: UsersPermissionsRole
  comments(sort: String, limit: Int, start: Int, where: JSON): [Review]
}
